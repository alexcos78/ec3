---
- hosts: localhost
  connection: local
  vars: 
    VERSION: 3.2.3
    ARGO_NS: argo
  tasks:
  - name: Create the ARGO ns file spec
    copy:
      content: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{ARGO_NS}}
      dest: /tmp/argo_ns.yml

  - name: Create ARGO ns
    command: kubectl apply -f /tmp/argo_ns.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

  - name: Deploy ARGO
    command: kubectl apply -n {{ARGO_NS}} -f https://github.com/argoproj/argo-workflows/releases/download/v{{VERSION}}/install.yaml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

  - name: Create the ARGO ingress file spec
    copy:
      content: |
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: argo-server
          namespace: {{ARGO_NS}}
          annotations:
            kubernetes.io/ingress.class: nginx
            nginx.ingress.kubernetes.io/backend-protocol: https
        spec:
          rules:
            - http:
                paths:
                  - backend:
                      service:
                        name: argo-server
                        port:
                          number: 2746
                    path: /
                    pathType: Prefix
      dest: /tmp/argo_ingress.yml

  - name: Deploy ARGO ingress
    command: kubectl apply -f /tmp/argo_ingress.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

  - name: Create the ARGO rbac conf file
    copy:
      content: |
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          namespace: {{ARGO_NS}}
          name: argo-user-cluster-role
        rules:
        - apiGroups: ["argoproj.io"]
          resources: ["clusterworkflowtemplates"]
          verbs: ["create", "delete", "list", "update", "get"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          namespace: {{ARGO_NS}}
          name: argo-user-role
        rules:
        - apiGroups: ["dataflow.argoproj.io"]
          resources: ["pipelines"]
          verbs: ["create", "delete", "list", "update", "get"]
        - apiGroups: ["argoproj.io"]
          resources: ["workflows", "eventsources", "sensors"]
          verbs: ["create", "delete", "list", "update", "get"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          namespace: {{ARGO_NS}}
          name: argo-user-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: argo-user-role
        subjects:
        - kind: ServiceAccount
          name: default
          namespace: {{ARGO_NS}}
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          namespace: {{ARGO_NS}}
          name: argo-user-cluster-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: argo-user-cluster-role
        subjects:
        - kind: ServiceAccount
          name: default
          namespace: {{ARGO_NS}}
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          namespace: {{ARGO_NS}}
          name: default-admin
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - kind: ServiceAccount
          name: default
          namespace: {{ARGO_NS}}
      dest: /tmp/argo_rbac.yml

  - name: Deploy ARGO rbac
    command: kubectl apply -f /tmp/argo_rbac.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

  - name: download argo-client
    get_url:
      url: https://github.com/argoproj/argo-workflows/releases/download/v{{VERSION}}/argo-linux-amd64.gz
      dest: /usr/local/bin/argo-linux-amd64.gz
    ignore_errors: yes

  - name: extract argo-client
    shell: gunzip /usr/local/bin/argo-linux-amd64.gz && mv /usr/local/bin/argo-linux-amd64 /usr/local/bin/argo && chmod +x /usr/local/bin/argo
    args:
      creates: /usr/local/bin/argo
    ignore_errors: yes

  - name: Get secret name
    command: kubectl get sa -n {{ARGO_NS}} default -o=jsonpath='{.secrets[0].name}'
    register: secret
  
  - name: Get ARGO Token
    command: kubectl get secret -n {{ARGO_NS}} {{ secret.stdout }} -o=jsonpath='{.data.token}'
    register: argo_token

  - name: Show ARGO Token
    debug:
      msg: "Bearer {{ argo_token.stdout | b64decode  }}"
