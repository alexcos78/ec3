#!/usr/bin/python

import sys
import boto3
from random import randint


def generate_random_name():
    left = [
		"admiring",
		"adoring",
		"affectionate",
		"agitated",
		"amazing",
		"angry",
		"awesome",
		"beautiful",
		"blissful",
		"bold",
		"boring",
		"brave",
		"busy",
		"charming",
		"clever",
		"cool",
		"compassionate",
		"competent",
		"condescending",
		"confident",
		"cranky",
		"crazy",
		"dazzling",
		"determined",
		"distracted",
		"dreamy",
		"eager",
		"ecstatic",
		"elastic",
		"elated",
		"elegant",
		"eloquent",
		"epic",
		"exciting",
		"fervent",
		"festive",
		"flamboyant",
		"focused",
		"friendly",
		"frosty",
		"funny",
		"gallant",
		"gifted",
		"goofy",
		"gracious",
		"great",
		"happy",
		"hardcore",
		"heuristic",
		"hopeful",
		"hungry",
		"infallible",
		"inspiring",
		"interesting",
		"intelligent",
		"jolly",
		"jovial",
		"keen",
		"kind",
		"laughing",
		"loving",
		"lucid",
		"magical",
		"mystifying",
		"modest",
		"musing",
		"naughty",
		"nervous",
		"nice",
		"nifty",
		"nostalgic",
		"objective",
		"optimistic",
		"peaceful",
		"pedantic",
		"pensive",
		"practical",
		"priceless",
		"quirky",
		"quizzical",
		"recursing",
		"relaxed",
		"reverent",
		"romantic",
		"sad",
		"serene",
		"sharp",
		"silly",
		"sleepy",
		"stoic",
		"strange",
		"stupefied",
		"suspicious",
		"sweet",
		"tender",
		"thirsty",
		"trusting",
		"unruffled",
		"upbeat",
		"vibrant",
		"vigilant",
		"vigorous",
		"wizardly",
		"wonderful",
		"xenodochial",
		"youthful",
		"zealous",
		"zen"
    ]
    rigth = [
		"albattani",
		"allen",
		"almeida",
		"antonelli",
		"agnesi",
		"archimedes",
		"ardinghelli",
		"aryabhata",
		"austin",
		"babbage",
		"banach",
		"banzai",
		"bardeen",
		"bartik",
		"bassi",
		"beaver",
		"bell",
		"benz",
		"bhabha",
		"bhaskara",
		"black",
		"blackburn",
		"blackwell",
		"bohr",
		"booth",
		"borg",
		"bose",
		"bouman",
		"boyd",
		"brahmagupta",
		"brattain",
		"brown",
		"buck",
		"burnell",
		"cannon",
		"carson",
		"cartwright",
		"carver",
		"cerf",
		"chandrasekhar",
		"chaplygin",
		"chatelet",
		"chatterjee",
		"chebyshev",
		"cohen",
		"chaum",
		"clarke",
		"colden",
		"cori",
		"cray",
		"curran",
		"curie",
		"darwin",
		"davinci",
		"dewdney",
		"dhawan",
		"diffie",
		"dijkstra",
		"dirac",
		"driscoll",
		"dubinsky",
		"easley",
		"edison",
		"einstein",
		"elbakyan",
		"elgamal",
		"elion",
		"ellis",
		"engelbart",
		"euclid",
		"euler",
		"faraday",
		"feistel",
		"fermat",
		"fermi",
		"feynman",
		"franklin",
		"gagarin",
		"galileo",
		"galois",
		"ganguly",
		"gates",
		"gauss",
		"germain",
		"goldberg",
		"goldstine",
		"goldwasser",
		"golick",
		"goodall",
		"gould",
		"greider",
		"grothendieck",
		"haibt",
		"hamilton",
		"haslett",
		"hawking",
		"hellman",
		"heisenberg",
		"hermann",
		"herschel",
		"hertz",
		"heyrovsky",
		"hodgkin",
		"hofstadter",
		"hoover",
		"hopper",
		"hugle",
		"hypatia",
		"ishizaka",
		"jackson",
		"jang",
		"jemison",
		"jennings",
		"jepsen",
		"johnson",
		"joliot",
		"jones",
		"kalam",
		"kapitsa",
		"kare",
		"keldysh",
		"keller",
		"kepler",
		"khayyam",
		"khorana",
		"kilby",
		"kirch",
		"knuth",
		"kowalevski",
		"lalande",
		"lamarr",
		"lamport",
		"leakey",
		"leavitt",
		"lederberg",
		"lehmann",
		"lewin",
		"lichterman",
		"liskov",
		"lovelace",
		"lumiere",
		"mahavira",
		"margulis",
		"matsumoto",
		"maxwell",
		"mayer",
		"mccarthy",
		"mcclintock",
		"mclaren",
		"mclean",
		"mcnulty",
		"mendel",
		"mendeleev",
		"meitner",
		"meninsky",
		"merkle",
		"mestorf",
		"mirzakhani",
		"montalcini",
		"moore",
		"morse",
		"murdock",
		"moser",
		"napier",
		"nash",
		"neumann",
		"newton",
		"nightingale",
		"nobel",
		"noether",
		"northcutt",
		"noyce",
		"panini",
		"pare",
		"pascal",
		"pasteur",
		"payne",
		"perlman",
		"pike",
		"poincare",
		"poitras",
		"proskuriakova",
		"ptolemy",
		"raman",
		"ramanujan",
		"ride",
		"ritchie",
		"rhodes",
		"robinson",
		"roentgen",
		"rosalind",
		"rubin",
		"saha",
		"sammet",
		"sanderson",
		"satoshi",
		"shamir",
		"shannon",
		"shaw",
		"shirley",
		"shockley",
		"shtern",
		"sinoussi",
		"snyder",
		"solomon",
		"spence",
		"stonebraker",
		"sutherland",
		"swanson",
		"swartz",
		"swirles",
		"taussig",
		"tereshkova",
		"tesla",
		"tharp",
		"thompson",
		"torvalds",
		"tu",
		"turing",
		"varahamihira",
		"vaughan",
		"visvesvaraya",
		"volhard",
		"villani",
		"wescoff",
		"wilbur",
		"wiles",
		"williams",
		"williamson",
		"wilson",
		"wing",
		"wozniak",
		"wright",
		"wu",
		"yalow",
		"yonath",
		"zhukovsky"
    ]
    return "%s_%s%d" % (left[randint(0, len(left))], rigth[randint(0, len(rigth))], randint(0, 9))


if len(sys.argv) != 7:
    print("Invalid parameters")
    sys.exit(-1)

op = sys.argv[1]
credentials = sys.argv[3]
record = sys.argv[4]
if record == "*":
    record = generate_random_name()
domain = sys.argv[5]
ip_address = sys.argv[6]

if credentials.startswith("arn:aws:iam"):
    sts_client = boto3.client('sts')

    assumed_role_object=sts_client.assume_role(
        RoleArn="arn:aws:iam::account-of-role-to-assume:role/name-of-role",
        RoleSessionName="AssumeRoleSession1"
    )

    credentials=assumed_role_object['Credentials']

    route53=boto3.client(
        'route53',
        aws_access_key_id=credentials['AccessKeyId'],
        aws_secret_access_key=credentials['SecretAccessKey'],
        aws_session_token=credentials['SessionToken'],
    )
elif credentials.find(":") != -1:
    parts = credentials.split(":")
    route53=boto3.client(
        'route53',
        aws_access_key_id=parts[0],
        aws_secret_access_key=parts[1]
    )
else:
    print("Invalid credentials")
    sys.exit(-2)


zone = route53.list_hosted_zones_by_name(DNSName=domain)["HostedZones"][0]

if op == "create":
    action = "UPSERT"
else:
    action = "DELETE"

response = route53.change_resource_record_sets(
    HostedZoneId=zone['Id'],
    ChangeBatch={
        'Changes': [
            {
                'Action': action,
                'ResourceRecordSet': {
                    'Name': "%s.%s" % (record, domain),
                    'Type': 'A',
                    'TTL': 300,
                    'ResourceRecords': [{'Value': ip_address}]
                }
            }
        ]
    })

print(response)
sys.exit(0)